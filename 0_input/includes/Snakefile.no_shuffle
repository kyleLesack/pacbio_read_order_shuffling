ALL_STRAINS = ["JU1400", "NIC2", "JU2526", "XZ1516", "MY2693", "QX1794", "NIC526", "DRR142768", "DL238","ECA396","JU2600","ECA36","EG4725","MY2147","JU310"]
REFERENCE = "/work/wasmuth_lab/mrkyle/sv_calling_pipeline2/1_prepare_reference/output/c_elegans.PRJNA13758.WS263/c_elegans.PRJNA13758.WS263.genomic.fa"
REFERENCE_SAW = "/work/wasmuth_lab/mrkyle/sv_calling_pipeline2/1_prepare_reference/output/c_elegans.PRJNA13758.WS263.sawriter/c_elegans.PRJNA13758.WS263.genomic.fa"
SAM_ALIGNERS = ["ngmlr","minimap2"] # Aligners that output sam files
SVIM_ALIGNERS = ["minimap2", "ngmlr", "pbmm2"]
SNIFFLES_ALIGNERS = ["minimap2", "ngmlr", "pbmm2"]
PBSV_ALIGNERS = ["pbmm2"]

NGMLRDICT10X = {"DL238": "0.06", "DRR142768": "0.13", "ECA36": "0.05", "ECA396": "0.07", "EG4725": "0.05", "JU1400": "0.09", "JU2526": "0.08", "JU2600": "0.06", "JU310": "0.06", "MY2147": "0.05", "MY2693": "0.08", "NIC2": "0.08", "NIC526": "0.07", "QX1794": "0.08","XZ1516": "0.13"}
MINIMAP2XDICT10X = {'DL238': '0.05', 'DRR142768': '0.12', 'ECA36': '0.04', 'ECA396': '0.07', 'EG4725': '0.04', 'JU1400': '0.08', 'JU2526': '0.08', 'JU2600': '0.05', 'JU310': '0.05', 'MY2147': '0.05', 'MY2693': '0.07', 'NIC2': '0.08', 'NIC526': '0.06', 'QX1794': '0.07','XZ1516': '0.12'}
PBMM2XDICT10X = {'DL238': '0.06', 'DRR142768': '0.12', 'ECA36': '0.05', 'ECA396': '0.07', 'EG4725': '0.04', 'JU1400': '0.08', 'JU2526': '0.08', 'JU2600': '0.05', 'JU310': '0.06', 'MY2147': '0.05', 'MY2693': '0.07', 'NIC2': '0.08', 'NIC526': '0.06', 'QX1794': '0.08','XZ1516': '0.13'}
NGMLRDICT20X = {"DL238": "0.12", "DRR142768": "0.26", "ECA36": "0.10", "ECA396": "0.15", "EG4725": "0.09", "JU1400": "0.17", "JU2526": "0.16", "JU2600": "0.11", "JU310": "0.12", "MY2147":"0.11", "MY2693": "0.16", "NIC2": "0.17", "NIC526": "0.13", "QX1794": "0.16","XZ1516": "0.27"}
MINIMAPDICT20X = {"DL238": "0.11", "DRR142768": "0.24", "ECA36": "0.09", "ECA396": "0.14", "EG4725": "0.09", "JU1400": "0.16", "JU2526": "0.16", "JU2600": "0.11", "JU310": "0.11", "MY2147":"0.09", "MY2693": "0.14", "NIC2": "0.15", "NIC526": "0.12", "QX1794": "0.14","XZ1516": "0.23"}
PBMMDICT20X = {"DL238": "0.11", "DRR142768": "0.25", "ECA36": "0.09", "ECA396": "0.15", "EG4725": "0.09", "JU1400": "0.16", "JU2526": "0.16", "JU2600": "0.11", "JU310": "0.12", "MY2147":"0.10", "MY2693": "0.15", "NIC2": "0.16", "NIC526": "0.13", "QX1794": "0.15","XZ1516": "0.26"}
NGMLRDICT40X = {"DL238": "0.24", "DRR142768": "0.52", "ECA36": "0.19", "ECA396": "0.30", "EG4725": "0.18", "JU1400": "0.34", "JU2526": "0.33", "JU2600": "0.22", "JU310": "0.25", "MY2147":"0.21", "MY2693": "0.31", "NIC2": "0.33", "NIC526": "0.27", "QX1794": "0.32","XZ1516": "0.54"}
MINIMAPDICT40X = {"DL238": "0.22", "DRR142768": "0.48", "ECA36": "0.17", "ECA396": "0.27", "EG4725": "0.17", "JU1400": "0.32", "JU2526": "0.31", "JU2600": "0.21", "JU310": "0.22", "MY2147":"0.19", "MY2693": "0.28", "NIC2": "0.30", "NIC526": "0.24", "QX1794": "0.28","XZ1516": "0.47"}
PBMMDICT40X = {"DL238": "0.23", "DRR142768": "0.50", "ECA36": "0.18", "ECA396": "0.29", "EG4725": "0.18", "JU1400": "0.33", "JU2526": "0.32", "JU2600": "0.22", "JU310": "0.23", "MY2147":"0.20", "MY2693": "0.30", "NIC2": "0.31", "NIC526": "0.26", "QX1794": "0.30","XZ1516": "0.51"}
NGMLRDICT60X = {"DL238": "0.36", "DRR142768": "0.78", "ECA36": "0.29", "ECA396": "0.44", "EG4725": "0.28", "JU1400": "0.51", "JU2526": "0.49", "JU2600": "0.34", "JU310": "0.37", "MY2147":"0.32", "MY2693": "0.47", "NIC2": "0.50", "NIC526": "0.40", "QX1794": "0.47","XZ1516": "0.81"}
MINIMAPDICT60X = {"DL238": "0.32", "DRR142768": "0.72", "ECA36": "0.26", "ECA396": "0.41", "EG4725": "0.26", "JU1400": "0.48", "JU2526": "0.47", "JU2600": "0.32", "JU310": "0.33", "MY2147":"0.28", "MY2693": "0.42", "NIC2": "0.45", "NIC526": "0.37", "QX1794": "0.42","XZ1516": "0.70"}
PBMMDICT60X = {"DL238": "0.34", "DRR142768": "0.75", "ECA36": "0.28", "ECA396": "0.44", "EG4725": "0.27", "JU1400": "0.49", "JU2526": "0.49", "JU2600": "0.33", "JU310": "0.35", "MY2147":"0.30", "MY2693": "0.45", "NIC2": "0.47", "NIC526": "0.39", "QX1794": "0.46","XZ1516": "0.77"}

rule pbmm2_original:
	input:
		"0_input/data/{strain}_all_reads.fastq"
	output:
		"2_alignments/pbmm2/{strain}/ORIGINAL/{strain}.bam"
	conda:  "../../yaml/pbmm2.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 50000 + ((attempt - 1) * 10000),
		time="72:00:00"
	shell:
		"pbmm2 align  -j {threads} {REFERENCE_SAW} {input} {output} --sort --median-filter --sample {wildcards.strain}  --rg '@RG\tID:myid\tSM:EG4725'"

rule ngmlr_original:
	input:
		"0_input/data/{strain}_all_reads.fastq"
	output:
		"2_alignments/ngmlr/{strain}/ORIGINAL/{strain}.sam"
	conda:  "../../yaml/ngmlr.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time="72:00:00"
	shell:
		"ngmlr -t {threads} -r {REFERENCE} -q {input} -o {output}"

rule minimap2_original:
	input:
		"0_input/data/{strain}_all_reads.fastq"
	output:
		"2_alignments/minimap2/{strain}/ORIGINAL/{strain}.sam"
	conda:  "../../yaml/pbhoney.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 100000 + ((attempt - 1) * 10000),
		time="72:00:00"
	shell:
		"minimap2 -t {threads} -ax map-pb {REFERENCE} {input} > {output}"

rule sam2bam_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}.sam"
	output:
		temp("2_alignments/{aligner}/{strain}/ORIGINAL/{strain}.bam")
	conda:  "../../yaml/samtools_1.9.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="12:00:00"
	shell:
		"samtools view -@ 8 -S -b {input} > {output}"

rule sortbam_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}.bam"
	output:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam"
	conda:  "../../yaml/samtools_1.9.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="17:00:00"
	shell:
		"samtools sort -o {output} {input} -@ 8"

rule getbamdepth_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam"
	output:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_depth.txt"
	wildcard_constraints:
		aligner = "|".join(SAM_ALIGNERS)
	conda:  "../../yaml/samtools_1.9.yaml"
	threads: 1
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="04:00:00"
	shell:
		"""samtools depth {input} | awk '{{sum+=$3}} END {{ print "Average = ",sum/NR}}' > {output}"""

rule getbamdepthpbmm2_original:
        input:
                "2_alignments/pbmm2/{strain}/ORIGINAL/{strain}.bam"
        output:
                "2_alignments/pbmm2/{strain}/ORIGINAL/{strain}_depth.txt"
        conda:  "../../yaml/samtools_1.9.yaml"
        threads: 1
        resources:
                mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
                time_hms="04:00:00"
        shell:
                """samtools depth {input} | awk '{{sum+=$3}} END {{ print "Average = ",sum/NR}}' > {output}"""

rule pbsvdiscover_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}.bam"
	output:
		temp("3_variant_calls/{aligner}/{strain}/ORIGINAL/{strain}.svsig.gz")
	wildcard_constraints:
		aligner = "|".join(PBSV_ALIGNERS)
	conda:  "../../yaml/pbsv.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 50000 + ((attempt - 1) * 10000),
		time="02:00:00"
	shell:
		"pbsv discover {input} {output}"

rule pbsvcall_original:
	input:
		"3_variant_calls/{aligner}/{strain}/ORIGINAL/{strain}.svsig.gz"
	output:
		"3_variant_calls/{aligner}/pbsv/{strain}/ORIGINAL/{strain}.vcf"
	wildcard_constraints:
		aligner = "|".join(PBSV_ALIGNERS)
	conda:  "../../yaml/pbsv.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 50000 + ((attempt - 1) * 10000),
		time="08:00:00"
	shell:
		"pbsv call -j 8 {REFERENCE_SAW} {input} {output}"

rule svim_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam"
	output:
		"3_variant_calls/{aligner}/svim/{strain}/ORIGINAL/variants.vcf"
	wildcard_constraints:
		aligner = "|".join(SVIM_ALIGNERS)
	params:
		outdir="3_variant_calls/{aligner}/svim/{strain}/ORIGINAL/"
	conda:  "../../yaml/svim.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="12:00:00"
	shell:
		"svim alignment {params.outdir} {input} {REFERENCE}"

rule indexbam_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam"
	output:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam.bai"
	wildcard_constraints:
		aligner = "|".join(SNIFFLES_ALIGNERS)
	conda:  "../../yaml/samtools_1.9.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="12:00:00"
	shell:
		"samtools index -@ {threads} {input} {output}"

rule sniffles_original:
	input:
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam",
		"2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam.bai"
	output:
		"3_variant_calls/{aligner}/sniffles/{strain}/ORIGINAL/{strain}.vcf"
	wildcard_constraints:
		aligner = "|".join(SNIFFLES_ALIGNERS)
	params:
		bamfile="2_alignments/{aligner}/{strain}/ORIGINAL/{strain}_sorted.bam"
	conda:  "../../yaml/sniffles2.yaml"
	threads: 8
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="12:00:00"
	shell:
		"sniffles --input {params.bamfile} -t 8 --vcf {output}"

## SUBSAMPLE BAMS
rule subsamplengmlrto10x_original:
	input:
		"2_alignments/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/10X/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: NGMLRDICT10X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplengmlrto20x_original:
	input:
		"2_alignments/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/20X/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: NGMLRDICT20X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplengmlrto40x_original:
	input:
		"2_alignments/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/40X/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: NGMLRDICT40X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplengmlrto60x_original:
	input:
		"2_alignments/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/60X/ngmlr/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: NGMLRDICT60X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsampleminimap2to10x_original:
	input:
		"2_alignments/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/10X/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: MINIMAPDICT10X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsampleminimap2to20x_original:
	input:
		"2_alignments/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/20X/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: MINIMAPDICT20X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsampleminimap2to40x_original:
	input:
		"2_alignments/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/40X/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: MINIMAPDICT40X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsampleminimap2to60x_original:
	input:
		"2_alignments/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/60X/minimap2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: MINIMAPDICT60X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplepbmm2to10x_original:
	input:
		"2_alignments/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/10X/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: PBMMDICT10X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplepbmm2to20x_original:
	input:
		"2_alignments/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/20X/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: PBMMDICT20X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplepbmm2to40x_original:
	input:
		"2_alignments/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/40X/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: PBMMDICT40X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""

rule subsamplepbmm2to60x_original:
	input:
		"2_alignments/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	output:
		"2_alignments/subsampled/60X/pbmm2/{strain}/ORIGINAL/{strain}_shuffled_sorted.bam"
	params:
		value=lambda wcs: PBMMDICT60X[wcs.strain]
	#        wildcard_constraints:
	#               aligner = "|".join(SAM_ALIGNERS)
	conda:  "yaml/samtools_1.9.yaml"
	threads: 4
	resources:
		mem_mb=lambda _, attempt: 10000 + ((attempt - 1) * 10000),
		time_hms="08:00:00"
	shell:
		"""samtools view -@ {threads} -b -s {params.value} -b {input} > {output}"""
